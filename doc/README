
    Exempli Gratia (POSIX by example)

    Copyright (c) 2015 Francisco Jose Monaco <monaco@icmc.usp.br>

    This is Free Open Source Software. For licensing, see COPYING

    POSIX-eg repository can be found at https://gitlab.com/monaco/posixeg


INTRODUCTION
--------------------------------------------------

If you intend to do the proposed programming exercuse and use the automate
testing tools to assess your solutions, you should follow the specifications
of each  problem carefully.  Unless, otherwise specified, the following general
rules apply.  Be aware of projct-specific requirements that, however, may
superpose these general rules.

COPYRIGHT
--------------------------------------------------

If you are going to make your project public, you should abide to applicable
authors right laws and ethical practice. Although many programmers are either
unaware or negligent about this matter, there are legal issues that you should
take care of, as you may unadvertently be liable to copyright infringement or 
ideological falsehood.

The source files you have authored yourself should be attributed to yourself. 
To that end, every source file should have a copyright claim and licensing 
information at the beginning of the text. For instance, if you are releasing 
your software under GPL, a suggestion might be

    Copyright (c) <Your Name> <year> 

    This file is part of Foo.

    Foo is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Foo is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Foo.  If not, see <http://www.gnu.org/licenses/>.

It is important that you put this note at the beginning of the source file.

The source files that you have borrowed from open source projects "as is" should
retain their original  copyright information. It would be a copyright 
infringement to remove the copyright claim and an ideological falsehood to 
assume authorship of someone else's work.  

The source files that you have obtained from other open source projects and have
modified yourself are derivative works, and as such should be properly 
attributed. To that end you should retain information about the original author
and add your own copyright claim. One possible way to make an attribution of a
derivative work might be

    Foo, Copyright (c) <Your Name> <year> 
    Foo is derived from Bar, Copyright (c) <Name of other Author> <year>

    This file is part of Foo.

    Foo is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Foo is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Foo.  If not, see <http://www.gnu.org/licenses/>.

As the program author and copyright holder, you may choose whatever license
you prefer. Bear in mind, however, that your license may be compatible with
the licenses of the other software your project makes use of. For instance,
if your project is a derivative work of a software covered by GNU GPL, you
may not use a proprietary license for your code.  Related issues apply if
you link your software against GPL-license libraries. Going through the
intricacy of licensing legal issues is not trivial. If in doubt, you may
safely use GNU GPL v3 for the software that interacts with POSIXeg.


REPOSITORY MANAGEMENT
--------------------------------------------------

* Do not upload generated files to the main repository. These include
object code (*.o) binaries, libraries (*.a, *.so) and temporary files. As a rule
of thumb, if 'make' has produced the files, do not upload it; only sources should
go to the repository.

* If the exercise's instructions specify what files should go into your project
directory and what files should not be included, follow the directions strictly.
Not complying to this recommendation may result in failure of automated testing
tools.


GENERAL RECOMMENDATIONS
--------------------------------------------------

Recommendations in this section are not meant as strict rules but offer useful
guidelines to keep your project well structured and easy to manage.

You may manage your VCS repository in the usual way. Notice, however the 
following suggestions.

* Try not to commit broken implementation to the master branch of the main 
repository. This includes buggy code or code that does not compile, as it may
cause troubles to your development teammates.  Instead, if you want to share 
some incomplete code, do it in a separate branch. You may create a new branch
by following these steps


  $ git branch branch_name                             create a new branch
  $ git checkout branch_name                           move to the new branch

  do your editing

  $ git add <Changed files>                            add modified files
  $ git commit -m "Some meaningful message"            commit modification
  $ git push origin branch_name                        upload the branch

To checkout a specific branch from the repository

  $ git fetch branch_name                              fetch the remote branch
  $ git checkout branch_name                           move to the new branch

You may use this mechanism to share code for discussions with teammates and
others. Please, refer to Git documentation for further details.

* As a suggestion, before starting to work in a new issue, you may go through
the following workflow

  $ git pull                              make sure you have the newest changes
  $ git checkout -b some_tag              create a new local branch

  do your editings

  $ git add <modified files>              mark the files to be committed
  $ git commit -m "A meaningful message"  commit your changes to local branch
  $ git checkout master                   move to the master branch
  $ git merge some_tag                    apply your changes
  $ git push                              upload your changes

This may save you time if you later want to move back to the master branch
before committing your changes (or to get rid of bad ideas without compromising
your master branch).



