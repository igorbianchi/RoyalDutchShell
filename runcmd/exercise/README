
    Libruncmd is part of POSIX Exempli Gratia (POSIX by example)

    Copyright (c) 2015 Francisco Jose Monaco <monaco@icmc.usp.br>

    This is Free Open Source Software. For licensing, see COPYING

    POSIX-eg repository can be found at https://gitlab.com/monaco/posixeg


OVERVIEW
--------------------------------------------------

Libruncmd is a small C library providing some simple functionality specified in
the companion file runcmd.txt.  The file, resented as a man-page like document,
describes the library API.

The implementation of libruncmd supplied with POSIXeg is incomplete and is meant
as an skeleton to further be developed by the student as an exercise. The 
proposed work consists in completing the implementation to meet the 
specification.

DETAILED INSTRUCTIONS
--------------------------------------------------

First, please, go through libruncmd specification in runcmd.txt.

The file, formatted like a traditional man page, specify libruncmd API comprised
by a single function runcmd() and a set of macros. The library is implemented in
the source file runcmd.c and the header file runcmd.h.

The library can be built with the aid of the provided makefile script by issuing
the command line at the shell prompt

    $ make

The command shall build both the static and the shared versions of the library, 
libruncmd.a and libruncmd.so, respectively, as well as some executable programs
meant for testing the function runcmd.

You may execute the program test-runcmd directly at the command line. 
Alternatively, you may execute the tests by issuing

    $ make test


The test consists in several checks, all of them should report success. 

The provided implementation is incomplete and, therefore, some tests will fail.
Your task consists in finishing the library implementation so that it complies
with the man page (runcmd.txt)

Aside the rule to make the libraries and executable programs, the provide 
script Makefile offers also some other options, including

    $ make clean                delete the files that were generated by make
    $ make dist                 creates a tarball for distribution
    $ make distcheck            checks if distribution builds correctly
    $ make install              install the binaries, libraries and headers
    $ make uninstall            uninstall what install has installed

Please, refer to the file Makefile for other rules and further details.

To begin with the exercise you should follow the steps listed bellow. Please,
read the whole instructions before you start (there are some useful tips ahead).

These directions assumes you are using a VCS (version control systems) 
repository to keep control of our project

1) Create a subdirectory runcmd in your project's main directory. For instance
if your project is named myproject

    $ cd myproject
    $ mkdir runcmd

2) Copy the file runcmd.h to myproject/runcmd

3) Copy runcmd.txt to it

4) Implement 

# make dir, use bootstrap, implement the lib.
# if you want to reuse files from posixeg ok, but adjust copyrigh
# upload to git

1) Create a subdirectory runcmd within your project's main directory. 

   For instance if your project lies on <somepath>/myproject, create a
    runcmd directory <somepath>/myproject/runcmd

   $ cd <somepath>/myproject
   $ mkdir runcmd

2) Within your runcmd directory, put your implementation of libruncmd.

   You may either create your own files or you may copy some files from
   POSIXeg's runcmd project. If you do so, remember to remove all

3) Provide a Makefile to build libruncmd. Your makefile should have at least the
   the rules to perform the following tasks

   make	     		build the library, both in static and in shared forms
   make install		install the library in $(PREFIX)/lib and the headers
   			in $(PREFIX)/include
   make uninstall	uninstall what 'install' rule has installed
   make dist		pack source for distribution
   make distcheck	verify whether the distributed source can be correctly
   			built (i.e. it has all the needed files)

   You may create your own Makefile. Alternatively, you may reuse the file
   Makefile provided by POSIXeg's runcmd project. Better yet, you may use 
   POSIXeg's Makefile boostrap script to create a brand new Makefile for your
   project.



   If you do so, remeber not to
   modify the copyright notice of the files you have copied from POSIXeg 
   project, and adding a note if you have modified them in any way. For all 
   other files you have created, please add a cooresponding copyright note
   if your own. Better yet, 
