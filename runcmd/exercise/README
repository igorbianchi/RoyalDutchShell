
    Libruncmd is part of POSIX Exempli Gratia (POSIX by example)

    Copyright (c) 2015 Francisco Jose Monaco <monaco@icmc.usp.br>

    This is Free Open Source Software. For licensing, see COPYING

    POSIX-eg repository can be found at https://gitlab.com/monaco/posixeg


OVERVIEW
--------------------------------------------------

Libruncmd is a small C library providing some simple functionality specified in
the companion file runcmd.txt.  The file, resented as a man-page like document,
describes the library API.

The implementation of libruncmd supplied with POSIXeg is incomplete and is meant
as an skeleton to further be developed by the student as an exercise. The 
proposed work consists in completing the implementation to meet the 
specification.

Please, read the following instructions thoroughly before starting to work on
the exercise. There are some important rules and useful tips that you should
not miss.

If you are following the proposed exercises' roadmap, you will upload your 
software in a public repository using a Free Software / Open Source license.

DETAILED INSTRUCTIONS
--------------------------------------------------

First, read posixeg/doc/README.

First, please, go through libruncmd specification in runcmd.txt.

The file, formatted like a traditional man page, specify libruncmd API comprised
by a single function runcmd() and a set of macros. The library is implemented in
the source file runcmd.c and the header file runcmd.h.

The library can be built with the aid of the provided makefile script by issuing
the command line at the shell prompt

    $ make

The command shall build both the static and the shared versions of the library, 
libruncmd.a and libruncmd.so, respectively, as well as some executable programs
meant for testing the function runcmd.

You may execute the program test-runcmd directly at the command line. 
Alternatively, you may execute the tests by issuing

    $ make test


The test consists in several checks, all of them should report success. 

The provided implementation is incomplete and, therefore, some tests will fail.
Your task consists in finishing the library implementation so that it complies
with the man page (runcmd.txt)

Aside the rule to make the libraries and executable programs, the provide 
script Makefile offers also some other options, including

    $ make clean                delete the files that were generated by make
    $ make dist                 creates a tarball for distribution
    $ make distcheck            checks if distribution builds correctly
    $ make install              install the binaries, libraries and headers
    $ make uninstall            uninstall what install has installed

Please, refer to the file Makefile for other rules and further details.

To begin with the exercise you should follow the steps listed bellow. Please,
read the whole instructions before you start (there are some useful tips ahead).

  These directions assumes you are using a VCS (version control systems) 
  repository to keep control of our project.  It is also assumed that your have
  a working project named 'myproject' and that the runcmd exercise is a 
  subproject of your main project 'myproject'. 

1) Create a subdirectory runcmd within your project's main directory. 

   For instance if your project lies on <somepath>/myproject, create a
    runcmd directory <somepath>/myproject/runcmd

   $ cd <somepath>/myproject
   $ mkdir runcmd

2) Within your runcmd directory, put your implementation of libruncmd.

   Your implementation of libruncmd does not need to provide any executable
   program; only the library is needed. As for the review of your exercise,
   your library will be linked to the test programs provided by POSIXEg's
   runcmd project.  Therefore, make sure that your library can be linked
   against POSIXEeg's test programs and that the tests result successfully.

   You should not simple copy files from POSIXeg's libruncmd source code; you 
   are entitled to create your own implementation of libruncmd.  You may, 
   however, to take advantage POSIXeg's libruncmd examples as reference.

   If you are going to resort to POSIXeg's runcmd example, these are he source 
   files you may be interested:

   runcmd.c  	 	the library source code
   runcmd.h		the library header

   You should also create and properly edit the following files

   README    	   	General overview of your project and directions for
   			building and installing the software. You should not
			simply copy POSIXeg runcmd's README; it's your own
			libruncmd implementation.  You, however, are welcome
			to make a reference to POSIXeg project.
			

   You will not need to copy the auxiliary files from POSIXeg's runcmd. You may
   optionally add your own test programs if you wish so, but this is not needed.
   Bear in mind that your libruncmd implementation are to be test against POSIXeg
   runcmd's check programs, not yours.

   Your implementation must use **exclusively** the standard C library (aka libc)
   and no other external library. This is part of the exercise.

   The implementation must be adherent to standards ISO/ANSI/Standard C (c89/90)
   and POSIX (IEEE 1003.1-2008). The evaluation of the exercise will be performed
   by compiling your library with

   gcc -Wall -Werror --ansi --pedantic-errors -D_POSIX_C_SOURCE=200809L

   It is strongly recommended that you keep this flags on your own Makefile.
   Adherence to Standard C and POSIX is also part of the exercise's purpose.

3) Provide a Makefile to build libruncmd. Your makefile should have at least the
   the rules to perform the following tasks

   make	     		build the library, both in static and in shared forms
   make install		install the library in $(PREFIX)/lib and the headers
   			in $(PREFIX)/include (see note on PREFIX).
   make uninstall	uninstall what 'install' rule has installed
   make dist		pack source for distribution
   make distcheck	verify whether the distributed source can be correctly
   			built (i.e. it has all the needed files)

   You may create your own Makefile. Alternatively, you may use  POSIXeg's 
   Makefile bootstrap script to create a brand new Makefile for your project.
   Please, see posixeg/utils/Makefile for further information.

   Your implementation must be successfully built without either errors or
   warnings during compilation.

   Please, make sure your 'make install' rule installs the software in the 
   proper place, as indicated by the makefile variable PREFIX:

   $(PREFIX)/lib     	       install the library here
   $(PREFIX)/include	       install the headers here

   This is particularly important because the review of your exercise implies
   in linking POSIXeg's test programs against your libruncmd implementation.
   The test cases will look for your library in $(PREFIX)/lib and 
   in $(PREFIX)/include.  If they are not there, the test will fail.

4) Upload your changes to the VCS repository.

   This exercise assume you are using a git repository named myproject and
   that your libruncmd implementation lies under directory 

   <myproject>/<runcmd>

   This exercise may be development in parts and it is possible that the
   evaluation process asks you to upload your changes 

   The development of this exercise may follow a schedule of partial evaluation.
   In this case, for every partial evaluation you will be requested to present
   your current implementation as a new 'release'. A release is a annotated in
   tag the main repository with a specified name.

   For the n-th partial evaluation, the release shall be identified by the tag

     part-nnn     

  where 'nnn' is a three-digit sequential integer starting from 001. For 
  instance, the partial evaluation 1, 2 and 3 are to be released under the tags
  part-001, part-002 and part-003, respectively.

  To make the release 1, you may use the following commands at your local git
  repository:

     $ git tag -a "part-001" -m "Some message"    (create the tag)
     $ git push origin part-001	      		  (upload the tag)

  Please consult Git documentation for further instructions on tagging.

  Make sure that the release complies with the requirements of every partial
  evaluation.  

HOW TO TEST YOUR IMPLEMENTATION
--------------------------------------------------

POSIXeg repository has a test program: test-runcmd. Normally, the default
Makefile rule will build the test-runcmd by linking it with the enclosed
libruncmd implementation offered as example. In order to run the test cases
against your own libruncmd implementation, you may perform the following 
procedure.

Within your project's runcmd directory, build and install the library. 
For instance, if you want to install the library at /home/foo/local

   $ cd <somepath>/myproject/runcmd
   $ make 
   $ make PREFIX=/home/foo/local install

This shall install libruncmd in /home/foo/local/lib

Then, within POSIXeg's runcmd directory

   $ cd <otherpath>/posixeg/runcmd/exercises
   $ make clean
   $ make LDFLAGS="-L/home/foo/local/lib -Wl,-rpath=/home/foo/local/lib" \
          CPPFLAGS="-I/home/foo/local/include"

This will link test-runcmd against your library and set the runtime
linker path (rpath) to look the libraries in the correct location
when the binary is executed. 

Now if you run the test

  $ make test

the test program will test your library, not the library that
comes with POSIXeg.

PROJECT FILES
--------------------------------------------------

Your project's directory should be like this

   your_project_dir
     |__runcmd
        |_source.c           
        |_runcmd.h 	      
        |_Makefile	      
        |_README             
        |_AUTHORS            
        |_COPYING
        |_INSTALL
   

File source.c is your library implementation. It does not need to be named
'runcmd.c'. You may also split the implementation into multiple source files.

File runcmd.h is the library header.  It must be named 'runcmd.h' because it 
defines libruncmd API (your library's users will include this header).

File Makefile is your project's makefile. It should be named 'Makefile' because
the utility make will look for it. You may have other includable makefiles.

You must provide a README file with instructions specific to your project. You
should not simply copy POSIXeg's README into your project's directory. If you
don't have specific instructions, at least introduce your project. A reasonable
introduction should mention the project's name, purposes, authors and licensing
information. It helps to have basic instructions for installation and execution.
As an open source project, you are required to inform where the
project can be obtained from. For instance, a minimal note might be

   "Foo is a library providing (...)
    For copyright and licensing information see files AUTHORS and COPYING.
    Foo source code may be obtained from (URL)
    Installation and execution are covered in file INSTALL"

You must provide a file AUTHORS, where you must state the name of all authors
of your project. If the project authors have written all the source code 
themselves, only the name of the project authors should appear. On the other 
hand, if your project makes use of code by third party developers, you should
add a note stating that. For instance, if you have reused code from POSIXeg,
an annotation might be like

   "This project is based on POSIXeg by Monaco F. J. Reused code was properly
    attributed when applicable. POSIXeg repository is publicly accessible 
    at https://gitlab.com/monaco/posixeg"

You must provide a file INSTALL with directions to build, install and use your
library. If you abide to conventional standards and do not need too specific
instructions, a simple annotation may be enough. For instance, a minimal
installation note might be

   "To build the software run make. 
    To install the software, run make install. Set the variable PREFIX to
    overwrite default installation path (PREFIX/lib, PREFIX/include)"

You must attribute your software properly. See section ON COPYRIGHT (this
is very important because your project is public!).

You should provide a file COPYING with the license text. For instance, if you
use GPL, you may download the license from http://www.gnu.org/licenses/lgpl.txt.

It is very important that your source directory comply with the above specification
as automated testing tools may fail otherwise.

ON COPYRIGHT
--------------------------------------------------

If you decide to reuse code from POSIXeg or any other open source project, 
remember to comply with existing authors write laws and ethical conventions.

Please, refer to posixeg/doc/README.

POSIXeg's license allows your to distribute POSIXeg's source code (either in
its original or modified form) with your own software. This is a benefit from 
POSIXeg's free software license.  Please, read this license terms and make
sure the license you choose for your project complies with the requirement's
or POSIXeg's license (i.e. you must use a free software, GPL-compatible 
license). For instance, you may use the same license (GPL).

If you enjoy the fact that you can inspect, study and even reuse code from
POSIXeg, you are strongly encouraged to consider a free software license for
your projects.

POSIXeg CHANGES AND UPDATES
--------------------------------------------------

Eventual changes in POSIXeg such as bug fixes and other improvements may affect
the test programs against which your libruncmd implementation will be evaluated.

Therefore, your are urged to keep an eye on POSIXeg updates during the whole
course of development of your exercise by monitoring the POSIXeg repository at

    https://gitlab.com/monaco/posixeg

You are also strongly encouraged to report bugs and suggest improvements by 
emailing the author at moanco@icmc.usp.br


